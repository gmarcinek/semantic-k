def _extract_region_terms(self, last_wiki: Dict) -> list:
        """Extract likely region/location terms from prior Wikipedia extracts.

        Looks for phrases like 'Wyżyna Częstochowska' or 'Jura Krakowsko-Częstochowska'.
        Returns a de-duplicated list of candidate region names.
        """
        import re

        regions = []
        sources = (last_wiki or {}).get('sources', [])
        texts = []
        for s in sources:
            t = s.get('extract') or ''
            if t:
                texts.append(t)

        patterns = [
            r"(Wyżyna\s+[A-ZŁŚŻŹĆĄĘÓŃ][\w\-ąćęłńóśźż]+(?:\s+[A-ZŁŚŻŹĆĄĘÓŃ][\w\-ąćęłńóśźż]+)*)",
            r"(Wyzyna\s+[A-ZLŚŻŹĆĄĘÓŃ][\w\-acelnoszz]+(?:\s+[A-ZLŚŻŹĆĄĘÓŃ][\w\-acelnoszz]+)*)",
            r"(Jura\s+[A-ZŁŚŻŹĆĄĘÓŃ][\w\-ąćęłńóśźż]+(?:\s+[A-ZŁŚŻŹĆĄĘÓŃ][\w\-ąćęłńóśźż]+)*)",
        ]

        seen_lc = set()
        for text in texts:
            for pat in patterns:
                for m in re.findall(pat, text):
                    name = m.strip()
                    key = name.lower()
                    if key not in seen_lc:
                        regions.append(name)
                        seen_lc.add(key)

        # De-duplicate and cap length
        return regions[:5]

    def _format_sse(self, event_type: str, data) -> str:
        """Format data as Server-Sent Event.

        Args:
            event_type: Event type (metadata, chunk, done, error)
            data: Event data

        Returns:
            Formatted SSE string
        """
        event_data = {
            'type': event_type,
            'data': data
        }
        return f"data: {json.dumps(event_data)}\n\n"

    async def handle_reset(self, session_id: Optional[str] = None) -> Dict:
        """Handle session reset request.

        Args:
            session_id: Optional session ID to reset

        Returns:
            Response dict with new session_id
        """
        new_session_id = self.session_service.reset_session(session_id)
        logger.info(f"Session reset: old={session_id}, new={new_session_id}")

        return {
            "session_id": new_session_id,
            "message": "Session reset successfully"
        }

